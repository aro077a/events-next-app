
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.20.1
 * Query Engine version: 60ba6551f29b17d7d6ce479e5733c70d9c00860e
 */
Prisma.prismaVersion = {
  client: "2.20.1",
  engine: "60ba6551f29b17d7d6ce479e5733c70d9c00860e"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.RegionScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.CityScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.AddressScalarFieldEnum = makeEnum({
  id: 'id',
  regionId: 'regionId',
  cityId: 'cityId',
  postalCode: 'postalCode',
  street: 'street',
  building: 'building',
  room: 'room'
});

exports.Prisma.LocationScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.LatLngScalarFieldEnum = makeEnum({
  id: 'id',
  latitude: 'latitude',
  longitude: 'longitude'
});

exports.Prisma.WorkingTimeScalarFieldEnum = makeEnum({
  id: 'id',
  startTime: 'startTime',
  endTime: 'endTime'
});

exports.Prisma.EventScalarFieldEnum = makeEnum({
  id: 'id',
  author: 'author',
  eventName: 'eventName',
  siteName: 'siteName',
  facebookLink: 'facebookLink',
  instagramLink: 'instagramLink',
  phone: 'phone',
  workingTimeId: 'workingTimeId',
  addressId: 'addressId',
  addressLink: 'addressLink',
  mapLink: 'mapLink',
  coordinatesId: 'coordinatesId',
  menuId: 'menuId',
  contentId: 'contentId'
});

exports.Prisma.EventsOnLocationsScalarFieldEnum = makeEnum({
  locationId: 'locationId',
  eventId: 'eventId'
});

exports.Prisma.KitchenScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.SpecialMenuScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.FacilityScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.AveragePriceScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.MediaScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  url: 'url'
});

exports.Prisma.MenuScalarFieldEnum = makeEnum({
  id: 'id',
  averagePriceId: 'averagePriceId'
});

exports.Prisma.MenuKitchensScalarFieldEnum = makeEnum({
  kitchenId: 'kitchenId',
  menuId: 'menuId'
});

exports.Prisma.MenuSpecialMenuScalarFieldEnum = makeEnum({
  specialMenuId: 'specialMenuId',
  menuId: 'menuId'
});

exports.Prisma.MenuFacilitiesScalarFieldEnum = makeEnum({
  facilityId: 'facilityId',
  menuId: 'menuId'
});

exports.Prisma.MenuMediaScalarFieldEnum = makeEnum({
  mediaId: 'mediaId',
  menuId: 'menuId',
  isCut: 'isCut'
});

exports.Prisma.ContentScalarFieldEnum = makeEnum({
  id: 'id',
  videoOverviewLink: 'videoOverviewLink',
  tourLink: 'tourLink',
  about: 'about'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  Region: 'Region',
  City: 'City',
  Address: 'Address',
  Location: 'Location',
  LatLng: 'LatLng',
  WorkingTime: 'WorkingTime',
  Event: 'Event',
  EventsOnLocations: 'EventsOnLocations',
  Kitchen: 'Kitchen',
  SpecialMenu: 'SpecialMenu',
  Facility: 'Facility',
  AveragePrice: 'AveragePrice',
  Media: 'Media',
  Menu: 'Menu',
  MenuKitchens: 'MenuKitchens',
  MenuSpecialMenu: 'MenuSpecialMenu',
  MenuFacilities: 'MenuFacilities',
  MenuMedia: 'MenuMedia',
  Content: 'Content'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
